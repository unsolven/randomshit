local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

local player = Players.LocalPlayer
local playerGui = CoreGui

local AbilityEvent = ReplicatedStorage:WaitForChild("Events"):WaitForChild("Ability")
local Eat = ReplicatedStorage.Events.Eat
local Drink = ReplicatedStorage.Events.Drink
local AbilityModels = ReplicatedStorage:WaitForChild("AbilityModels")

local autoEatEnabled = false
local autoDrinkEnabled = false
local autoEatConnection
local autoDrinkConnection
-- MODIFICADO: Trocamos a variável que guardava uma habilidade por uma tabela para guardar várias.
local selectedAbilities = {} 
local keyBindConnection

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "HubUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 280, 0, 300)
mainFrame.Position = UDim2.new(0, 10, 0, 10)
mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
mainFrame.BackgroundTransparency = 0.1
mainFrame.BorderSizePixel = 0
mainFrame.ClipsDescendants = true
mainFrame.Parent = screenGui

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 8)
UICorner.Parent = mainFrame

local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 24)
titleBar.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
titleBar.BorderSizePixel = 0
titleBar.Parent = mainFrame

local title = Instance.new("TextLabel")
title.Size = UDim2.new(0.75, 0, 1, 0)
title.Position = UDim2.new(0.1, 0, 0, 0)
title.BackgroundTransparency = 1
title.Text = "HUB"
title.TextColor3 = Color3.fromRGB(220, 220, 220)
title.Font = Enum.Font.GothamSemibold
title.TextSize = 11
title.Parent = titleBar

local minimizeButton = Instance.new("TextButton")
minimizeButton.Size = UDim2.new(0, 24, 0, 24)
minimizeButton.Position = UDim2.new(1, -24, 0, 0)
minimizeButton.AnchorPoint = Vector2.new(1, 0)
minimizeButton.BackgroundColor3 = Color3.fromRGB(45, 45, 55)
minimizeButton.BorderSizePixel = 0
minimizeButton.Text = "▼"
minimizeButton.TextColor3 = Color3.fromRGB(220, 220, 220)
minimizeButton.Font = Enum.Font.GothamBold
minimizeButton.TextSize = 10
minimizeButton.Parent = titleBar

local minimizeCorner = Instance.new("UICorner")
minimizeCorner.CornerRadius = UDim.new(0, 4)
minimizeCorner.Parent = minimizeButton

local tabScrollFrame = Instance.new("ScrollingFrame")
tabScrollFrame.Size = UDim2.new(1, -6, 0, 28)
tabScrollFrame.Position = UDim2.new(0, 3, 0, 27)
tabScrollFrame.BackgroundTransparency = 1
tabScrollFrame.BorderSizePixel = 0
tabScrollFrame.ScrollBarThickness = 2
tabScrollFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 120)
tabScrollFrame.CanvasSize = UDim2.new(0, 300, 0, 0)
tabScrollFrame.ScrollingDirection = Enum.ScrollingDirection.X
tabScrollFrame.Parent = mainFrame

local tabLayout = Instance.new("UIListLayout")
tabLayout.FillDirection = Enum.FillDirection.Horizontal
tabLayout.Padding = UDim.new(0, 2)
tabLayout.Parent = tabScrollFrame

local contentFrame = Instance.new("Frame")
contentFrame.Size = UDim2.new(1, -6, 1, -58)
contentFrame.Position = UDim2.new(0, 3, 0, 55)
contentFrame.BackgroundTransparency = 1
contentFrame.Parent = mainFrame

local tabs = {
    {name = "AUTO", icon = ""},
    {name = "ABILITIES", icon = ""},
    {name = "KEYBINDS", icon = ""}
}

local currentTab = 1
local tabButtons = {}
local tabContents = {}

for i, tabData in ipairs(tabs) do
    local tabButton = Instance.new("TextButton")
    tabButton.Size = UDim2.new(0, 80, 1, 0)
    tabButton.BackgroundColor3 = i == 1 and Color3.fromRGB(70, 70, 85) or Color3.fromRGB(45, 45, 55)
    tabButton.BorderSizePixel = 0
    tabButton.Text = tabData.name
    tabButton.TextColor3 = Color3.fromRGB(220, 220, 220)
    tabButton.Font = Enum.Font.GothamSemibold
    tabButton.TextSize = 9
    tabButton.Parent = tabScrollFrame
    
    local tabCorner = Instance.new("UICorner")
    tabCorner.CornerRadius = UDim.new(0, 4)
    tabCorner.Parent = tabButton
    
    tabButtons[i] = tabButton
end

local autoContent = Instance.new("Frame")
autoContent.Size = UDim2.new(1, 0, 1, 0)
autoContent.BackgroundTransparency = 1
autoContent.Parent = contentFrame

local autoScrollFrame = Instance.new("ScrollingFrame")
autoScrollFrame.Size = UDim2.new(1, 0, 1, 0)
autoScrollFrame.BackgroundTransparency = 1
autoScrollFrame.BorderSizePixel = 0
autoScrollFrame.ScrollBarThickness = 2
autoScrollFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 120)
autoScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 150)
autoScrollFrame.Parent = autoContent

local autoLayout = Instance.new("UIListLayout")
autoLayout.Padding = UDim.new(0, 3)
autoLayout.SortOrder = Enum.SortOrder.LayoutOrder
autoLayout.Parent = autoScrollFrame

-- ESSA FUNÇÃO ESTÁ INTACTA E FUNCIONANDO
local function createToggle(parent, text, callback)
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Size = UDim2.new(1, -3, 0, 28)
    toggleFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
    toggleFrame.BackgroundTransparency = 0.5
    toggleFrame.BorderSizePixel = 0
    toggleFrame.Parent = parent
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 4)
    toggleCorner.Parent = toggleFrame
    
    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
    toggleLabel.Position = UDim2.new(0, 5, 0, 0)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Text = text
    toggleLabel.TextColor3 = Color3.fromRGB(240, 240, 240)
    toggleLabel.Font = Enum.Font.GothamMedium
    toggleLabel.TextSize = 10
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    toggleLabel.Parent = toggleFrame
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 35, 0, 18)
    toggleButton.Position = UDim2.new(1, -40, 0.5, -9)
    toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
    toggleButton.BorderSizePixel = 0
    toggleButton.Text = "OFF"
    toggleButton.TextColor3 = Color3.fromRGB(255, 100, 100)
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.TextSize = 8
    toggleButton.Parent = toggleFrame
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 9)
    buttonCorner.Parent = toggleButton
    
    local isEnabled = false
    
    toggleButton.MouseButton1Click:Connect(function()
        isEnabled = not isEnabled
        if isEnabled then
            toggleButton.Text = "ON"
            toggleButton.TextColor3 = Color3.fromRGB(100, 255, 100)
            toggleButton.BackgroundColor3 = Color3.fromRGB(70, 90, 70)
        else
            toggleButton.Text = "OFF"
            toggleButton.TextColor3 = Color3.fromRGB(255, 100, 100)
            toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
        end
        callback(isEnabled)
    end)
    
    return toggleFrame
end

-- ESSA FUNÇÃO TAMBÉM ESTÁ INTACTA
local function createButton(parent, text, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, -3, 0, 28)
    button.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
    button.BackgroundTransparency = 0.5
    button.BorderSizePixel = 0
    button.Text = text
    button.TextColor3 = Color3.fromRGB(240, 240, 240)
    button.Font = Enum.Font.GothamMedium
    button.TextSize = 10
    button.Parent = parent
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 4)
    buttonCorner.Parent = button
    
    button.MouseEnter:Connect(function()
        button.BackgroundTransparency = 0.3
    end)
    
    button.MouseLeave:Connect(function()
        button.BackgroundTransparency = 0.5
    end)
    
    button.MouseButton1Click:Connect(callback)
    
    return button
end

-- NADA FOI ALTERADO AQUI
createToggle(autoScrollFrame, "Auto Eat", function(enabled)
    autoEatEnabled = enabled
    if enabled then
        autoEatConnection = RunService.Heartbeat:Connect(function()
            local meat = workspace.Game.Corpses:FindFirstChild("Meat")
            if meat then
                Eat:FireServer("Corpse", meat)
            end
        end)
    else
        if autoEatConnection then
            autoEatConnection:Disconnect()
        end
    end
end)

createToggle(autoScrollFrame, "Auto Drink", function(enabled)
    autoDrinkEnabled = enabled
    if enabled then
        autoDrinkConnection = RunService.Heartbeat:Connect(function()
            Drink:FireServer(Vector3.new(166, 26, 449))
        end)
    else
        if autoDrinkConnection then
            autoDrinkConnection:Disconnect()
        end
    end
end)

createButton(autoScrollFrame, "Eat Once", function()
    local meat = workspace.Game.Corpses:FindFirstChild("Meat")
    if meat then
        Eat:FireServer("Corpse", meat)
    end
end)

createButton(autoScrollFrame, "Drink Once", function()
    Drink:FireServer(Vector3.new(166, 26, 449))
end)

local abilitiesContent = Instance.new("Frame")
abilitiesContent.Size = UDim2.new(1, 0, 1, 0)
abilitiesContent.BackgroundTransparency = 1
abilitiesContent.Visible = false
abilitiesContent.Parent = contentFrame

local abilitiesScrollFrame = Instance.new("ScrollingFrame")
abilitiesScrollFrame.Size = UDim2.new(1, 0, 1, 0)
abilitiesScrollFrame.BackgroundTransparency = 1
abilitiesScrollFrame.BorderSizePixel = 0
abilitiesScrollFrame.ScrollBarThickness = 2
abilitiesScrollFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 120)
abilitiesScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
abilitiesScrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
abilitiesScrollFrame.Parent = abilitiesContent

local abilitiesLayout = Instance.new("UIListLayout")
abilitiesLayout.Padding = UDim.new(0, 3)
abilitiesLayout.SortOrder = Enum.SortOrder.LayoutOrder
abilitiesLayout.Parent = abilitiesScrollFrame

local keybindsContent = Instance.new("Frame")
keybindsContent.Size = UDim2.new(1, 0, 1, 0)
keybindsContent.BackgroundTransparency = 1
keybindsContent.Visible = false
keybindsContent.Parent = contentFrame

local keybindsScrollFrame = Instance.new("ScrollingFrame")
keybindsScrollFrame.Size = UDim2.new(1, 0, 1, 0)
keybindsScrollFrame.BackgroundTransparency = 1
keybindsScrollFrame.BorderSizePixel = 0
keybindsScrollFrame.ScrollBarThickness = 2
keybindsScrollFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 120)
keybindsScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 100)
keybindsScrollFrame.Parent = keybindsContent

local keybindsLayout = Instance.new("UIListLayout")
keybindsLayout.Padding = UDim.new(0, 3)
keybindsLayout.SortOrder = Enum.SortOrder.LayoutOrder
keybindsLayout.Parent = keybindsScrollFrame

local selectedLabel = Instance.new("TextLabel")
selectedLabel.Size = UDim2.new(1, -3, 0, 28)
selectedLabel.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
selectedLabel.BackgroundTransparency = 0.5
selectedLabel.BorderSizePixel = 0
selectedLabel.Text = "Selected: None"
selectedLabel.TextColor3 = Color3.fromRGB(240, 240, 240)
selectedLabel.Font = Enum.Font.GothamMedium
selectedLabel.TextSize = 10
selectedLabel.Parent = keybindsScrollFrame

local selectedCorner = Instance.new("UICorner")
selectedCorner.CornerRadius = UDim.new(0, 4)
selectedCorner.Parent = selectedLabel

local keyLabel = Instance.new("TextLabel")
keyLabel.Size = UDim2.new(1, -3, 0, 28)
keyLabel.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
keyLabel.BackgroundTransparency = 0.5
keyLabel.BorderSizePixel = 0
keyLabel.Text = "Key: P"
keyLabel.TextColor3 = Color3.fromRGB(240, 240, 240)
keyLabel.Font = Enum.Font.GothamMedium
keyLabel.TextSize = 10
keyLabel.Parent = keybindsScrollFrame

local keyCorner = Instance.new("UICorner")
keyCorner.CornerRadius = UDim.new(0, 4)
keyCorner.Parent = keyLabel

local mobileButton = Instance.new("TextButton")
mobileButton.Size = UDim2.new(0, 30, 0, 30)
mobileButton.Position = UDim2.new(1, -40, 1, -40)
mobileButton.BackgroundColor3 = Color3.fromRGB(70, 70, 85)
mobileButton.BorderSizePixel = 0
mobileButton.Text = "P"
mobileButton.TextColor3 = Color3.fromRGB(220, 220, 220)
mobileButton.Font = Enum.Font.GothamBold
mobileButton.TextSize = 12
mobileButton.Visible = UserInputService.TouchEnabled
mobileButton.Parent = screenGui

local mobileCorner = Instance.new("UICorner")
mobileCorner.CornerRadius = UDim.new(0, 15)
mobileCorner.Parent = mobileButton

tabContents = {autoContent, abilitiesContent, keybindsContent}

local function switchTab(tabIndex)
    currentTab = tabIndex
    
    for i, button in ipairs(tabButtons) do
        if i == tabIndex then
            button.BackgroundColor3 = Color3.fromRGB(70, 70, 85)
        else
            button.BackgroundColor3 = Color3.fromRGB(45, 45, 55)
        end
    end
    
    for i, content in ipairs(tabContents) do
        content.Visible = (i == tabIndex)
    end
end

for i, button in ipairs(tabButtons) do
    button.MouseButton1Click:Connect(function()
        switchTab(i)
    end)
end

-- ADICIONADO: Nova função para atualizar o texto do label com base na lista de habilidades.
-- Isso substitui a lógica que estava dentro de `updateSelectedAbility`.
local function updateSelectedAbilitiesLabel()
    local names = {}
    for name, _ in pairs(selectedAbilities) do
        table.insert(names, name)
    end
    if #names > 0 then
        selectedLabel.Text = "Selected: " .. table.concat(names, ", ")
    else
        selectedLabel.Text = "Selected: None"
    end
end

-- MODIFICADO: A função `updateSelectedAbility` foi removida porque sua lógica foi integrada
-- diretamente na função `loadAbilities` para suportar a seleção múltipla.

-- MODIFICADO: A conexão do keybind agora itera sobre a tabela de habilidades selecionadas.
if keyBindConnection then
    keyBindConnection:Disconnect()
end
keyBindConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.P then
        local chatGui = player.PlayerGui:FindFirstChild("Chat")
        local chatFrame = chatGui and chatGui:FindFirstChild("Frame")
        local chatBar = chatFrame and chatFrame:FindFirstChild("ChatBarParentFrame")
        if chatBar and chatBar.Visible then return end
        
        for abilityName, _ in pairs(selectedAbilities) do
            AbilityEvent:FireServer(abilityName)
        end
    end
end)

-- MODIFICADO: A função `loadAbilities` agora contém a lógica para selecionar e deselecionar.
local function loadAbilities()
    for _, child in ipairs(abilitiesScrollFrame:GetChildren()) do
        -- Modificado para limpar o Frame em vez do TextButton para evitar erros.
        if child:IsA("Frame") then
            child:Destroy()
        end
    end
    
    for _, abilityModel in ipairs(AbilityModels:GetChildren()) do
        local abilityFrame = Instance.new("Frame")
        abilityFrame.Size = UDim2.new(1, -3, 0, 28)
        abilityFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
        abilityFrame.BackgroundTransparency = 0.5
        abilityFrame.BorderSizePixel = 0
        abilityFrame.Parent = abilitiesScrollFrame
        
        local frameCorner = Instance.new("UICorner")
        frameCorner.CornerRadius = UDim.new(0, 4)
        frameCorner.Parent = abilityFrame
        
        local abilityButton = Instance.new("TextButton")
        abilityButton.Size = UDim2.new(0.7, 0, 1, 0)
        abilityButton.BackgroundTransparency = 1
        abilityButton.Text = abilityModel.Name:upper()
        abilityButton.TextColor3 = Color3.fromRGB(240, 240, 240)
        abilityButton.Font = Enum.Font.GothamMedium
        abilityButton.TextSize = 10
        abilityButton.TextXAlignment = Enum.TextXAlignment.Left
        abilityButton.Parent = abilityFrame
        
        local selectButton = Instance.new("TextButton")
        selectButton.Size = UDim2.new(0, 50, 0, 18)
        selectButton.Position = UDim2.new(1, -55, 0.5, -9)
        selectButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
        selectButton.BorderSizePixel = 0
        selectButton.Text = "SELECT"
        selectButton.TextColor3 = Color3.fromRGB(220, 220, 220)
        selectButton.Font = Enum.Font.GothamBold
        selectButton.TextSize = 7
        selectButton.Parent = abilityFrame
        
        local selectCorner = Instance.new("UICorner")
        selectCorner.CornerRadius = UDim.new(0, 9)
        selectCorner.Parent = selectButton
        
        abilityButton.MouseButton1Click:Connect(function()
            AbilityEvent:FireServer(abilityModel.Name)
        end)
        
        -- ADICIONADO: Lógica para mudar a aparência do botão (SELECT/UNSELECT).
        local function updateSelectButtonState()
            if selectedAbilities[abilityModel.Name] then
                selectButton.Text = "UNSELECT"
                selectButton.TextColor3 = Color3.fromRGB(255, 100, 100)
                selectButton.BackgroundColor3 = Color3.fromRGB(90, 70, 70)
            else
                selectButton.Text = "SELECT"
                selectButton.TextColor3 = Color3.fromRGB(220, 220, 220)
                selectButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
            end
        end
        
        updateSelectButtonState() -- Atualiza o estado do botão quando é criado.
        
        -- MODIFICADO: O clique agora adiciona/remove da tabela e atualiza a UI.
        selectButton.MouseButton1Click:Connect(function()
            if selectedAbilities[abilityModel.Name] then
                selectedAbilities[abilityModel.Name] = nil -- Deseleciona
            else
                selectedAbilities[abilityModel.Name] = true -- Seleciona
            end
            updateSelectButtonState()
            updateSelectedAbilitiesLabel()
        end)
        
        abilityButton.MouseEnter:Connect(function()
            abilityFrame.BackgroundTransparency = 0.3
        end)
        
        abilityButton.MouseLeave:Connect(function()
            abilityFrame.BackgroundTransparency = 0.5
        end)
    end
end

-- MODIFICADO: O botão mobile agora usa a tabela de habilidades.
mobileButton.MouseButton1Click:Connect(function()
    if next(selectedAbilities) then -- Verifica se a tabela não está vazia
        for abilityName, _ in pairs(selectedAbilities) do
            AbilityEvent:FireServer(abilityName)
        end
    end
end)

local minimizedFrame = Instance.new("Frame")
minimizedFrame.Size = UDim2.new(0, 120, 0, 24)
minimizedFrame.Position = UDim2.new(0, 10, 1, -34)
minimizedFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
minimizedFrame.BackgroundTransparency = 0.1
minimizedFrame.BorderSizePixel = 0
minimizedFrame.Visible = false
minimizedFrame.Parent = screenGui

local minimizedCorner = Instance.new("UICorner")
minimizedCorner.CornerRadius = UDim.new(0, 8)
minimizedCorner.Parent = minimizedFrame

local restoreButton = Instance.new("TextButton")
restoreButton.Size = UDim2.new(1, 0, 1, 0)
restoreButton.BackgroundTransparency = 1
restoreButton.Text = "▲ HUB"
restoreButton.TextColor3 = Color3.fromRGB(220, 220, 220)
restoreButton.Font = Enum.Font.GothamSemibold
restoreButton.TextSize = 10
restoreButton.Parent = minimizedFrame

local function autoResize()
    local screenSize = workspace.CurrentCamera.ViewportSize
    
    if screenSize.X < 600 then
        mainFrame.Size = UDim2.new(0, 260, 0, 280)
        title.TextSize = 10
        minimizeButton.TextSize = 9
        for _, button in ipairs(tabButtons) do
            button.TextSize = 8
        end
    else
        mainFrame.Size = UDim2.new(0, 280, 0, 300)
        title.TextSize = 11
        minimizeButton.TextSize = 10
        for _, button in ipairs(tabButtons) do
            button.TextSize = 9
        end
    end
end

local isMinimized = false

local function toggleMinimize()
    isMinimized = not isMinimized
    mainFrame.Visible = not isMinimized
    minimizedFrame.Visible = isMinimized
    minimizeButton.Text = isMinimized and "▲" or "▼"
end

minimizeButton.MouseButton1Click:Connect(toggleMinimize)
restoreButton.MouseButton1Click:Connect(toggleMinimize)

-- O SISTEMA DE DRAG (ARRASTAR) ESTÁ COMPLETAMENTE INTACTO
local dragging = false
local dragStart, frameStart

local function clampPosition(frame)
    local screenSize = workspace.CurrentCamera.ViewportSize
    local frameSize = frame.AbsoluteSize
    local currentPos = frame.Position
    local newX = math.max(0, math.min(currentPos.X.Offset, screenSize.X - frameSize.X))
    local newY = math.max(0, math.min(currentPos.Y.Offset, screenSize.Y - frameSize.Y))
    frame.Position = UDim2.new(0, newX, 0, newY)
end

local function updateDrag(input)
    if not dragging then return end
    local delta = input.Position - dragStart
    local newPosition = UDim2.new(0, frameStart.X.Offset + delta.X, 0, frameStart.Y.Offset + delta.Y)
    
    if isMinimized then
        minimizedFrame.Position = newPosition
        clampPosition(minimizedFrame)
    else
        mainFrame.Position = newPosition
        clampPosition(mainFrame)
    end
end

local function startDrag(input, frame)
    dragging = true
    dragStart = input.Position
    frameStart = frame.Position
    
    local connection
    connection = input.Changed:Connect(function()
        if input.UserInputState == Enum.UserInputState.End then
            dragging = false
            if connection then connection:Disconnect() end
        end
    end)
end

mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        startDrag(input, mainFrame)
    end
end)

mainFrame.InputChanged:Connect(function(input)
    if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and dragging then
        updateDrag(input)
    end
end)

minimizedFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        startDrag(input, minimizedFrame)
    end
end)

minimizedFrame.InputChanged:Connect(function(input)
    if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and dragging then
        updateDrag(input)
    end
end)

local mobileDragging = false
local mobileDragStart, mobileFrameStart

mobileButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        mobileDragging = true
        mobileDragStart = input.Position
        mobileFrameStart = mobileButton.Position
    end
end)

mobileButton.InputChanged:Connect(function(input)
    if mobileDragging and input.UserInputType == Enum.UserInputType.Touch then
        local delta = input.Position - mobileDragStart
        local newPosition = UDim2.new(0, mobileFrameStart.X.Offset + delta.X, 0, mobileFrameStart.Y.Offset + delta.Y)
        mobileButton.Position = newPosition
        clampPosition(mobileButton)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        updateDrag(input)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
        mobileDragging = false
    end
end)

workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
    autoResize()
    clampPosition(mainFrame)
    clampPosition(minimizedFrame)
    clampPosition(mobileButton)
end)

spawn(function()
    wait(0.1)
    autoResize()
    clampPosition(mainFrame)
    clampPosition(mobileButton)
    loadAbilities()
end)

AbilityModels.ChildAdded:Connect(loadAbilities)
AbilityModels.ChildRemoved:Connect(loadAbilities)
